pipeline {
    agent any
    environment{
        dockerhub=credentials("dockerhub-team11")
    }

    stages {
        stage('Pull Code') {
            steps {
                git branch: 'matching_post', credentialsId: 'bb2785d0-d692-4cc6-839d-7f17113657c5', url: 'https://github.com/armphanu/Software-Development-Tools-And-Environments-Group11.git'
            }
        }
        stage('Download dependency') {
            steps {
                sh '''cd front-end
                npm install'''
            }
        }
        stage('Scan code with Lint') {
            steps {
                sh '''cd front-end
                npm run lint'''
            }
        }
        stage('Run unit test') {
            steps {
                sh '''cd front-end
                npm i jest-html-reporter
                npm run test:unit'''
            }
 
        }
        stage('Create code coverage unit test') {
            steps {
                    clover(cloverReportDir: 'front-end/coverage', cloverReportFileName: 'clover.xml',
                    healthyTarget: [methodCoverage: 70, conditionalCoverage: 80, statementCoverage: 80],
                    unhealthyTarget: [methodCoverage: 0, conditionalCoverage: 0, statementCoverage: 0],
                    failingTarget: [methodCoverage: 0, conditionalCoverage: 0, statementCoverage: 0]
                )
                publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'front-end/coverage/lcov-report', reportFiles: 'index.html', reportName: 'Unit code coverage Report', reportTitles: 'Unit code coverage Report'])
            }
 
        }
        stage('Create test report unit test') {
            steps {
                publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'front-end', reportFiles: 'test-report.html', reportName: 'Unit Test Report', reportTitles: 'Unit Test Report'])
            }
 
        }

         
        stage('Run component test') {
            steps {
                    sh '''cd front-end
                    npm i cypress-mochawesome-reporter
                    npm run component_test'''
            }
        }
        stage('Create test report component test') {
            steps {
                    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'front-end/cypress/reports', reportFiles: 'index.html', reportName: 'component Test Report', reportTitles: 'component Test Report'])
            }
 
        }

        stage('tagging  github'){
            steps{
                withCredentials([gitUsernamePassword(credentialsId: 'bb2785d0-d692-4cc6-839d-7f17113657c5', gitToolName: 'git-tool')]) {
                    sh 'git tag 1.0.4' 
                    sh 'git tag'
                    sh 'git push origin 1.0.4'
                }
               
            }
        }

        stage('Build image') {
            agent {
                 docker { image 'node:16-alpine3.14' }
                }
            steps {
                    sh '''cd front-end
                    docker build -t team-11-frontend:1.1.0
                    '''

            }
        }
        stage('push to dockerhub') {
            steps {
                   sh '''docker push armphanu/team-11-frontend:1.1.0
                   '''
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploy'
            }
        }
        stage('Notification') {
            steps {
                echo 'All Stage pass'
            }
        }
    }
}
